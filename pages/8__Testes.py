import streamlit as st
import pandas as pd
from datetime import datetime
import plotly.express as px

# Configura√ß√£o de layout
st.set_page_config(
    page_title="Departamento de P√≥s Obra",
    page_icon="Home.jpg",
    layout='wide'
)

logo_horizontal='LOGO_VR.png'
logo_reduzida="LOGO_VR_REDUZIDA.png"
st.logo(image=logo_horizontal, size="large",icon_image=logo_reduzida)

# Cabe√ßalho
st.markdown('<h1 style="color: orange;">PAINEL DE ASSIST√äNCIA T√âCNICA üí•</h1>', unsafe_allow_html=True)
st.markdown('Acompanhamento de Solicita√ß√µes de Assist√™ncia T√©cnica')

# Cacheando os dados
@st.cache_data
def load_and_preprocess_data(url):
    df = pd.read_csv(url)
    df["Solicita√ß√£o Abertura"] = pd.to_datetime(df["Solicita√ß√£o Abertura"], format="%d/%m/%Y", errors="coerce")
    df["Solicita√ß√£o Encerramento"] = pd.to_datetime(df["Solicita√ß√£o Encerramento"], format="%d/%m/%Y", errors="coerce")
    today = datetime.today()
    df["Solicita√ß√£o Encerramento"].fillna(today, inplace=True)
    df["Dura√ß√£o"] = (df["Solicita√ß√£o Encerramento"] - df["Solicita√ß√£o Abertura"]).dt.days
    return df

google_sheet_url = "https://docs.google.com/spreadsheets/d/1kjX6aEi4rGHOFmFPH9uKDnCdEGYvMiFQUpfoYvBkvO4/export?format=csv"
df = load_and_preprocess_data(google_sheet_url)

# Primeira linha de filtros
col_ano, col_mes, col_situacao_juridica, col_situacao_financeira = st.columns(4)

with col_ano:
    ano_min = int(df["Solicita√ß√£o Abertura"].dt.year.min()) if not pd.isna(df["Solicita√ß√£o Abertura"].dt.year.min()) else 2020
    ano_max = int(df["Solicita√ß√£o Abertura"].dt.year.max()) if not pd.isna(df["Solicita√ß√£o Abertura"].dt.year.max()) else 2025
    selected_ano = st.selectbox(
        "Filtrar por Ano:",
        options=[None] + list(range(ano_min, ano_max + 1)),
        format_func=lambda x: "Todos" if x is None else x,
    )

with col_mes:
    selected_mes = st.selectbox(
        "Filtrar por M√™s:",
        options=[None, "Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
                 "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        format_func=lambda x: "Todos" if x is None else x,
    )

with col_situacao_juridica:
    selected_situacao_juridica = st.checkbox(
        "Situa√ß√£o Regulat√≥ria Jur√≠dica",
        value=False
    )

with col_situacao_financeira:
    selected_situacao_financeira = st.checkbox(
        "Situa√ß√£o Regulat√≥ria Financeira",
        value=False
    )

# Segunda linha de filtros
col_obra_nome, col_local_nome, col_solicitacao_procedencia, col_status, col_responsavel = st.columns(5)

with col_obra_nome:
    selected_obra_nome = st.multiselect(
        "Filtrar por Nome do Empreendimento:",
        options=df["Obra Nome"].unique(),
        default=[]
    )

with col_local_nome:
    selected_local_nome = st.multiselect(
        "Filtrar por Bloco/Unidade:",
        options=df["Local Nome"].unique(),
        default=[]
    )

with col_solicitacao_procedencia:
    selected_solicitacao_procedencia = st.multiselect(
        "Filtrar por Solicita√ß√£o Proced√™ncia:",
        options=df["Solicita√ß√£o Proced√™ncia"].unique(),
        default=[]
    )

with col_status:
    selected_status = st.multiselect(
        "Status do Empreendimento:",
        options=df["Status"].unique(),
        default=[]
    )

with col_responsavel:
    selected_responsavel = st.multiselect(
        "Filtrar por Respons√°vel:",
        options=["Todos"] + df["Respons√°vel"].unique().tolist(),
        default=[]
    )
st.markdown('''____________________________________________________________________________________________''')

# Aplicando os filtros de data
filtered_df = df.copy()
if selected_ano is not None:
    filtered_df = filtered_df[filtered_df["Solicita√ß√£o Abertura"].dt.year == selected_ano]

if selected_mes is not None:
    months = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
              "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
    mes_index = months.index(selected_mes) + 1
    filtered_df = filtered_df[filtered_df["Solicita√ß√£o Abertura"].dt.month == mes_index]

if selected_obra_nome:
    filtered_df = filtered_df[filtered_df["Obra Nome"].isin(selected_obra_nome)]

if selected_local_nome:
    filtered_df = filtered_df[filtered_df["Local Nome"].isin(selected_local_nome)]

if selected_solicitacao_procedencia:
    filtered_df = filtered_df[filtered_df["Solicita√ß√£o Proced√™ncia"].isin(selected_solicitacao_procedencia)]

if selected_status:
    filtered_df = filtered_df[filtered_df["Status"].isin(selected_status)]

if selected_situacao_juridica:
    filtered_df = filtered_df[filtered_df["Situa√ß√£o Regulat√≥ria Jur√≠dica"] == "Sim"]

if selected_situacao_financeira:
    filtered_df = filtered_df[filtered_df["Situa√ß√£o Regulat√≥ria Financeira"] == "Sim"]

if selected_responsavel:
    filtered_df = filtered_df[filtered_df["Respons√°vel"].isin(selected_responsavel)]
else:
    filtered_df = filtered_df  # Se nada for selecionado, mant√©m os dados como est√£o

# M√©tricas
filtered_df_not_closed = filtered_df[filtered_df["Solicita√ß√£o Situa√ß√£o"] != "Encerrada"]

filtered_df_0_15 = filtered_df_not_closed[(filtered_df_not_closed["Dura√ß√£o"] >= 0) & (filtered_df_not_closed["Dura√ß√£o"] <= 15)]
filtered_df_15_30 = filtered_df_not_closed[(filtered_df_not_closed["Dura√ß√£o"] > 15) & (filtered_df_not_closed["Dura√ß√£o"] <= 30)]
filtered_df_30_45 = filtered_df_not_closed[(filtered_df_not_closed["Dura√ß√£o"] > 30) & (filtered_df_not_closed["Dura√ß√£o"] <= 45)]
filtered_df_45_plus = filtered_df_not_closed[filtered_df_not_closed["Dura√ß√£o"] > 45]

# Adicionando a nova m√©trica de total de solicita√ß√µes
metric_1 = len(filtered_df_0_15)
metric_2 = len(filtered_df_15_30)
metric_3 = len(filtered_df_30_45)
metric_4 = len(filtered_df_45_plus)
metric_5 = len(filtered_df)  # Contagem total de solicita√ß√µes ap√≥s os filtros

# Exibindo as m√©tricas
col1, col2, col3, col4, col5 = st.columns(5)
col1.metric("Solicita√ß√µes em Aberto h√° 0-15 dias", metric_1)
col2.metric("Solicita√ß√µes em Aberto h√° 15-30 dias", metric_2)
col3.metric("Solicita√ß√µes em Aberto h√° 30-45 dias", metric_3)
col4.metric("Solicita√ß√µes em Aberto h√° >45 dias", metric_4)
col5.metric("Total de Solicita√ß√µes", metric_5)  # Exibindo o total

# Checkboxes para exibir dados e filtrar gr√°fico
#st.markdown("### Mostrar Solicita√ß√µes")

# Altera√ß√£o para 5 colunas, com a √∫ltima coluna vazia
col5, col6, col7, col8, col9 = st.columns(5)
show_0_15 = col5.checkbox("Mostrar Solicita√ß√µes (0-15 dias)")
show_15_30 = col6.checkbox("Mostrar Solicita√ß√µes (15-30 dias)")
show_30_45 = col7.checkbox("Mostrar Solicita√ß√µes (30-45 dias)")
show_45_plus = col8.checkbox("Mostrar Solicita√ß√µes (>45 dias)")
# A √∫ltima coluna (col9) permanece vazia


# Condi√ß√µes para filtro adicional
if show_0_15 or show_15_30 or show_30_45 or show_45_plus:
    filtered_graph_df = pd.concat([ 
        filtered_df_0_15 if show_0_15 else pd.DataFrame(),
        filtered_df_15_30 if show_15_30 else pd.DataFrame(),
        filtered_df_30_45 if show_30_45 else pd.DataFrame(),
        filtered_df_45_plus if show_45_plus else pd.DataFrame()
    ])
else:
    filtered_graph_df = filtered_df
st.markdown('''____________________________________________________________________________________________''')#

# Gr√°fico de barras por "Obra Nome"
#st.markdown("### Distribui√ß√£o de Solicita√ß√µes por Obra Nome")

if not filtered_graph_df.empty:
    # Contagem de solicita√ß√µes por "Obra Nome" e "Status"
    df_grouped = filtered_graph_df.groupby(["Obra Nome", "Status"]).size().reset_index(name="Contagem")

    # Cria√ß√£o do gr√°fico de barras
    fig = px.bar(
        df_grouped,
        x="Obra Nome",
        y="Contagem",
        color="Status",  # Usando "Status" no gr√°fico
        title="Solicita√ß√µes por Empreendimento",
        labels={"Obra Nome": "Obra", "Contagem": "N√∫mero de Solicita√ß√µes"},
        barmode="stack",  # Empilhar barras em vez de sobrepor
        text="Contagem"  # Adiciona o texto com o n√∫mero dentro da barra
    )

    # Atualizar o gr√°fico
    fig.update_layout(
        xaxis_title="",
        yaxis_title="",
        showlegend=True,  # Exibir legenda
        xaxis=dict(showline=False),  # Remover linha do eixo X
        yaxis=dict(showline=False),  # Remover linha do eixo Y
        height=400,  # Ajustar altura do gr√°fico
        margin=dict(t=40, b=80, l=40, r=40),  # Ajustar margens para visualiza√ß√£o
    )

    # Aumentar o tamanho dos r√≥tulos de dados para facilitar leitura
    fig.update_traces(
        texttemplate='%{text}', 
        textposition='inside',  # Colocar r√≥tulo dentro da barra
        insidetextanchor='middle',  # Alinhar texto dentro da barra
        textfont=dict(size=14)  # Tamanho maior dos r√≥tulos
    )

    # Exibir gr√°fico
    st.plotly_chart(fig, use_container_width=True)
else:
    st.warning("N√£o h√° dados dispon√≠veis para exibi√ß√£o do gr√°fico.")

# Exibi√ß√£o dos dados filtrados
if show_0_15:
    st.write("### Solicita√ß√µes (0-15 dias)")
    st.dataframe(filtered_df_0_15)
if show_15_30:
    st.write("### Solicita√ß√µes (15-30 dias)")
    st.dataframe(filtered_df_15_30)
if show_30_45:
    st.write("### Solicita√ß√µes (30-45 dias)")
    st.dataframe(filtered_df_30_45)
if show_45_plus:
    st.write("### Solicita√ß√µes (>45 dias)")
    st.dataframe(filtered_df_45_plus)
st.markdown('''____________________________________________________________________________________________''')#

st.write('### An√°lise de Indicadores')
